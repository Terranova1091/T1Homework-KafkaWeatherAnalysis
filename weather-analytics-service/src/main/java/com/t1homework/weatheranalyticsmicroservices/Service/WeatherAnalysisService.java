package com.t1homework.weatheranalyticsmicroservices.Service;


import com.t1homework.WeatherModel.WeatherEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Slf4j
public class WeatherAnalysisService {

    private final List<WeatherEvent> allEvents = new ArrayList<>();
    private final Map<String, List<WeatherEvent>> eventsByCity = new HashMap<>();

    public synchronized void addEvent(WeatherEvent event) {
        allEvents.add(event);

        String city = event.getCity();
        eventsByCity
                .computeIfAbsent(city, k -> new ArrayList<>())
                .add(event);
    }

    // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    public Map<String, Object> getGlobalAnalysis() {
        Map<String, Object> analysis = buildAnalysis(allEvents);
        analysis.remove("–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞"); // –∏–ª–∏ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        return analysis;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
    public Map<String, Object> getCityAnalysis(String city) {
        List<WeatherEvent> cityEvents = eventsByCity.get(city);
        if (cityEvents == null || cityEvents.isEmpty()) {
            return Map.of("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥—É " + city);
        }
        return buildAnalysis(cityEvents);
    }

    private Map<String, Object> buildAnalysis(List<WeatherEvent> events) {
        double avgTemp = events.stream()
                .mapToDouble(WeatherEvent::getTemperature)
                .average()
                .orElse(0.0);

        double maxTemp = events.stream()
                .mapToDouble(WeatherEvent::getTemperature)
                .max()
                .orElse(0.0);

        double minTemp = events.stream()
                .mapToDouble(WeatherEvent::getTemperature)
                .min()
                .orElse(0.0);

        String currentWeather = events.stream()
                .max(Comparator.comparing(WeatherEvent::getZonedDateTime))  // –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π
                .map(WeatherEvent::getStatus)                      // –±–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                .orElse("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");

        Map<String, Object> analysis = new LinkedHashMap<>();
        analysis.put("–ö–æ–ª-–≤–æ –¥–∞–Ω–Ω—ã—Ö", events.size());
        analysis.put("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", avgTemp);
        analysis.put("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", maxTemp);
        analysis.put("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", minTemp);
        analysis.put("–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", currentWeather);

        return analysis;
    }

    public void printAnalysis() {
        log.info("=== üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ ===");
        log.info("{}", getGlobalAnalysis());

        log.info("=== üèôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º ===");
        eventsByCity.keySet().forEach(city -> {
            log.info("–ì–æ—Ä–æ–¥: {}", city);
            log.info("{}", getCityAnalysis(city));
        });
    }

}